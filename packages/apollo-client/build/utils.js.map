{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAGhC,MAAM,UAAU,UAAU,CAAC,QAAmC;IAC5D,IAAI,OAAO,GAAiB,EAAE,CAAC;IAE/B,IAAI,QAAQ,EAAE;QACZ,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAC5B,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,EAAE;YACpE,IAAI,QAAQ,IAAI,eAAe,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,KAAK,CAAC,QAAQ,CAAC;oBAC5B,SAAS;oBACT,UAAU,EAAE,IAAI,EAAE,MAAM,IAAI,QAAQ,EAAE,IAAI,EAAE,MAAM;oBAClD,IAAI,EAAE,eAAe,EAAE,SAAS;oBAChC,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;iBACxB,CAAC,CAAC;aACJ;QACH,CAAC,CACF,CAAC;KACH;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { print } from 'graphql';\nimport type { ArrayOfQuery, RawQueryData } from './types';\n\nexport function getQueries(queryMap: Map<string, RawQueryData>): ArrayOfQuery {\n  let queries: ArrayOfQuery = [];\n\n  if (queryMap) {\n    [...queryMap.values()].forEach(\n      ({ document, variables, observableQuery, diff, lastDiff }, queryId) => {\n        if (document && observableQuery) {\n          queries.push({\n            queryString: print(document),\n            variables,\n            cachedData: diff?.result || lastDiff?.diff?.result,\n            name: observableQuery?.queryName,\n            id: queryId?.toString(),\n          });\n        }\n      }\n    );\n  }\n  return queries;\n}\n"]}