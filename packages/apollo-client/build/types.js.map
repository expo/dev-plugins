{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ApolloClient, NormalizedCacheObject, ObservableQuery } from '@apollo/client';\nimport type { QueryInfo } from '@apollo/client/core/QueryInfo';\nimport type { ASTNode } from 'graphql';\n\nexport type ApolloClientType = ApolloClient<NormalizedCacheObject>;\n\nexport type Variables = QueryInfo['variables'];\n\nexport type RawQueryData = {\n  document: ASTNode;\n  variables: Variables;\n  observableQuery: ObservableQuery;\n  lastDiff: any;\n  diff: any;\n  queryId: string;\n};\n\nexport type QueryData = {\n  id: string;\n  queryString: string;\n  variables: Variables;\n  cachedData: string;\n  name: string | undefined;\n};\n\nexport type MutationData = {\n  id: string;\n  name: string | null;\n  variables: object;\n  loading: boolean;\n  error: object;\n  body: string | undefined;\n};\n\nexport type Callback = () => any;\n\nexport type ArrayOfQuery = Array<QueryData>;\nexport type ArrayOfMutations = Array<MutationData>;\n\nexport type ApolloClientState = {\n  id: number;\n  lastUpdateAt: string;\n  queries: ArrayOfQuery;\n  mutations: ArrayOfMutations;\n  cache: object;\n};\n"]}