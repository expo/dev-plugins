{"version":3,"file":"useApolloClientDevTools.js","sourceRoot":"","sources":["../src/useApolloClientDevTools.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DocumentNode } from '@apollo/client';\nimport { getOperationName } from '@apollo/client/utilities';\nimport { useDevToolsPluginClient, type EventSubscription } from 'expo/devtools';\nimport { useEffect } from 'react';\n\nimport type {\n  ApolloClientState,\n  ApolloClientType,\n  ArrayOfMutations,\n  ArrayOfQuery,\n  MutationData,\n} from './types';\nimport { getQueries } from './utils';\n\nlet tick = 0;\n\nexport function useApolloClientDevTools(apolloClient: ApolloClientType) {\n  const client = useDevToolsPluginClient('apollo-client');\n\n  useEffect(() => {\n    const subscriptions: EventSubscription[] = [];\n\n    async function setup() {\n      let acknowledged = true;\n      let apolloData: null | ApolloClientState = await getCurrentState(apolloClient);\n\n      const sendData = () =>\n        void {\n          if(apolloData) {\n            subscriptions.push(client?.sendMessage('GQL:response', apolloData));\n            acknowledged = false;\n            apolloData = null;\n          },\n        };\n\n      const logger = async (): Promise<void> => {\n        if (acknowledged) {\n          apolloData = await getCurrentState(apolloClient);\n          sendData();\n        }\n      };\n\n      subscriptions.push(\n        client?.addMessageListener('GQL:ack', () => {\n          acknowledged = true;\n          sendData();\n        })\n      );\n\n      subscriptions.push(\n        client?.addMessageListener('GQL:request', async () => {\n          client?.sendMessage('GQL:response', await getCurrentState(apolloClient));\n        })\n      );\n\n      apolloClient.__actionHookForDevTools(debounce(() => logger()));\n\n      client?.sendMessage('GQL:response', apolloData);\n    }\n\n    setup();\n\n    return () => {\n      for (const subscription of subscriptions) {\n        subscription?.remove();\n      }\n    };\n  }, [client, apolloClient]);\n}\n\nfunction getTime(): string {\n  const date = new Date();\n  return `${date.getHours()}:${date.getMinutes()}`;\n}\n\nfunction extractQueries(client: ApolloClientType): Map<any, any> {\n  // @ts-expect-error queryManager is private method\n  if (!client || !client.queryManager) {\n    return new Map();\n  }\n  // @ts-expect-error queryManager is private method\n  return client.queryManager.queries;\n}\n\nfunction getAllQueries(client: ApolloClientType): ArrayOfQuery {\n  const queryMap = extractQueries(client);\n  const allQueries = getQueries(queryMap);\n  return allQueries;\n}\n\ntype MutationObject = {\n  mutation: DocumentNode;\n  variables: object;\n  loading: boolean;\n  error: object;\n};\nfunction getMutationData(allMutations: Record<string, MutationObject>): Array<MutationData> {\n  return [...Object.keys(allMutations)]?.map((key) => {\n    const { mutation, variables, loading, error } = allMutations[key];\n\n    return {\n      id: key,\n      name: getOperationName(mutation),\n      variables,\n      loading,\n      error,\n      body: mutation?.loc?.source?.body,\n    };\n  });\n}\n\nfunction getAllMutations(client: ApolloClientType): ArrayOfMutations {\n  // @ts-expect-error private method\n  const allMutations = client.queryManager.mutationStore || {};\n\n  const final = getMutationData(allMutations);\n\n  return final;\n}\n\nfunction getCurrentState(client: ApolloClientType): Promise<ApolloClientState> {\n  tick++;\n\n  let currentState: ApolloClientState;\n\n  return new Promise((res) => {\n    setTimeout(() => {\n      currentState = {\n        id: tick,\n        lastUpdateAt: getTime(),\n        queries: getAllQueries(client),\n        mutations: getAllMutations(client),\n        cache: client.cache.extract(true),\n      };\n      res(currentState);\n    }, 0);\n  }).then(() => {\n    return currentState;\n  });\n}\n\nfunction debounce(func: (...args: any) => any, timeout = 500): () => any {\n  let timer: ReturnType<typeof setTimeout>;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      // @ts-expect-error add typings for this\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n"]}