{"version":3,"file":"useAsyncStorageDevTools.js","sourceRoot":"","sources":["../src/useAsyncStorageDevTools.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,2CAA2C,CAAC;AACrE,OAAO,EAAE,uBAAuB,EAA0B,MAAM,eAAe,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAGlC,MAAM,UAAU,uBAAuB;IACrC,MAAM,MAAM,GAAG,uBAAuB,CAAC,eAAe,CAAC,CAAC;IAExD,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,EAAE,GAAG,CAAC,KAAa,EAAE,QAAuC,EAAE,EAAE;YACpE,MAAM,EAAE,kBAAkB,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;gBACjD,IAAI;oBACF,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAEtC,MAAM,EAAE,WAAW,CAAC,OAAO,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;iBACjD;gBAAC,OAAO,KAAK,EAAE;oBACd,IAAI;wBACF,MAAM,EAAE,WAAW,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;qBACzC;oBAAC,MAAM,GAAE;iBACX;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,MAAM,aAAa,GAAwB,EAAE,CAAC;QAC9C,aAAa,CAAC,IAAI,CAChB,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YACtB,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,UAAU,EAAE,CAAC;YAC7C,KAAK,CAAC,MAAM,CAAC,CAAC;YACd,OAAO,MAAM,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CACH,CAAC;QAEF,aAAa,CAAC,IAAI,CAChB,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;YAC3B,OAAO,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC,CACH,CAAC;QAEF,aAAa,CAAC,IAAI,CAChB,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;YACvB,OAAO,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC,CAAC,CACH,CAAC;QAEF,OAAO,GAAG,EAAE;YACV,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;gBACxC,YAAY,EAAE,MAAM,EAAE,CAAC;aACxB;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AACf,CAAC","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useDevToolsPluginClient, type EventSubscription } from 'expo/devtools';\nimport { useEffect } from 'react';\nimport { Method } from '../methods';\n\nexport function useAsyncStorageDevTools() {\n  const client = useDevToolsPluginClient('async-storage');\n\n  useEffect(() => {\n    const on = (event: Method, listener: (params: any) => Promise<any>) => {\n      client?.addMessageListener(event, async (params) => {\n        try {\n          const result = await listener(params);\n\n          client?.sendMessage(`ack:${event}`, { result });\n        } catch (error) {\n          try {\n            client?.sendMessage('error', { error });\n          } catch {}\n        }\n      });\n    };\n\n    const subscriptions: EventSubscription[] = [];\n    subscriptions.push(\n      on('getAll', async () => {\n        const keys = await AsyncStorage.getAllKeys();\n        alert('test');\n        return await AsyncStorage.multiGet(keys);\n      })\n    );\n\n    subscriptions.push(\n      on('set', ({ key, value }) => {\n        return AsyncStorage.setItem(key, value);\n      })\n    );\n\n    subscriptions.push(\n      on('remove', ({ key }) => {\n        return AsyncStorage.removeItem(key);\n      })\n    );\n\n    return () => {\n      for (const subscription of subscriptions) {\n        subscription?.remove();\n      }\n    };\n  }, [client]);\n}\n"]}