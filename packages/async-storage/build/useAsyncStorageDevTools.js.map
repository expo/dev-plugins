{"version":3,"file":"useAsyncStorageDevTools.js","sourceRoot":"","sources":["../src/useAsyncStorageDevTools.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,2CAA2C,CAAC;AACrE,OAAO,EAAE,uBAAuB,EAA0B,MAAM,eAAe,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAGlC,MAAM,UAAU,uBAAuB;IACrC,MAAM,MAAM,GAAG,uBAAuB,CAAC,eAAe,CAAC,CAAC;IAExD,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,EAAE,GAAG,CACT,KAAa,EACb,QAAoE,EACpE,EAAE,CACF,MAAM,EAAE,kBAAkB,CAAC,KAAK,EAAE,KAAK,EAAE,MAAwC,EAAE,EAAE;YACnF,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAEtC,MAAM,EAAE,WAAW,CAAC,OAAO,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;aACjD;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI;oBACF,MAAM,EAAE,WAAW,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;iBACzC;gBAAC,MAAM,GAAE;aACX;QACH,CAAC,CAAC,CAAC;QAEL,MAAM,aAAa,GAAwB,EAAE,CAAC;QAC9C,aAAa,CAAC,IAAI,CAChB,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YACtB,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,UAAU,EAAE,CAAC;YAC7C,OAAO,MAAM,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CACH,CAAC;QAEF,aAAa,CAAC,IAAI,CAChB,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;YAC3B,IAAI,GAAG,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS;gBAAE,OAAO,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;;gBACjF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC,CAAC,CACH,CAAC;QAEF,aAAa,CAAC,IAAI,CAChB,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;YACvB,IAAI,GAAG,KAAK,SAAS;gBAAE,OAAO,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;;gBACtD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC,CAAC,CACH,CAAC;QAEF,OAAO,GAAG,EAAE;YACV,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;gBACxC,YAAY,EAAE,MAAM,EAAE,CAAC;aACxB;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AACf,CAAC","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useDevToolsPluginClient, type EventSubscription } from 'expo/devtools';\r\nimport { useEffect } from 'react';\r\nimport { Method } from '../methods';\r\n\r\nexport function useAsyncStorageDevTools() {\r\n  const client = useDevToolsPluginClient('async-storage');\r\n\r\n  useEffect(() => {\r\n    console.log(client?.connectionInfo);\r\n  }, [client]);\r\n\r\n  useEffect(() => {\r\n    const on = (\r\n      event: Method,\r\n      listener: (params: { key?: string; value?: string }) => Promise<any>\r\n    ) =>\r\n      client?.addMessageListener(event, async (params: { key?: string; value?: string }) => {\r\n        try {\r\n          const result = await listener(params);\r\n\r\n          client?.sendMessage(`ack:${event}`, { result });\r\n        } catch (error) {\r\n          try {\r\n            client?.sendMessage('error', { error });\r\n          } catch {}\r\n        }\r\n      });\r\n\r\n    const subscriptions: EventSubscription[] = [];\r\n    subscriptions.push(\r\n      on('getAll', async () => {\r\n        const keys = await AsyncStorage.getAllKeys();\r\n        return await AsyncStorage.multiGet(keys);\r\n      })\r\n    );\r\n\r\n    subscriptions.push(\r\n      on('set', ({ key, value }) => {\r\n        if (key !== undefined && value !== undefined) return AsyncStorage.setItem(key, value);\r\n        else return Promise.resolve();\r\n      })\r\n    );\r\n\r\n    subscriptions.push(\r\n      on('remove', ({ key }) => {\r\n        if (key !== undefined) return AsyncStorage.removeItem(key);\r\n        else return Promise.resolve();\r\n      })\r\n    );\r\n\r\n    return () => {\r\n      for (const subscription of subscriptions) {\r\n        subscription?.remove();\r\n      }\r\n    };\r\n  }, [client]);\r\n}\r\n"]}