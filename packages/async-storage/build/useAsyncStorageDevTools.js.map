{"version":3,"file":"useAsyncStorageDevTools.js","sourceRoot":"","sources":["../src/useAsyncStorageDevTools.ts"],"names":[],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useDevToolsPluginClient, type EventSubscription } from 'expo/devtools';\r\nimport { useCallback, useEffect } from 'react';\r\nimport { Method } from '../methods';\r\n\r\n/**\r\n * This hook registers a devtools plugin for AsyncStorage.\r\n *\r\n * The plugin provides you with the ability to view, add, edit, and remove AsyncStorage entries.\r\n *\r\n * @param props\r\n * @param props.errorHandler - A function that will be called with any errors that occur while communicating\r\n * with the devtools, if not provided errors will be ignored. Setting this is highly recommended.\r\n */\r\nexport function useAsyncStorageDevTools({\r\n  errorHandler,\r\n}: {\r\n  errorHandler?: (error: Error) => void;\r\n} = {}) {\r\n  const client = useDevToolsPluginClient('async-storage');\r\n\r\n  const handleError = useCallback(\r\n    (error: unknown) => {\r\n      if (error instanceof Error) {\r\n        errorHandler?.(error);\r\n      } else {\r\n        errorHandler?.(new Error(`Unknown error: ${String(error)}`));\r\n      }\r\n    },\r\n    [errorHandler]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const on = (\r\n      event: Method,\r\n      listener: (params: { key?: string; value?: string }) => Promise<any>\r\n    ) =>\r\n      client?.addMessageListener(event, async (params: { key?: string; value?: string }) => {\r\n        try {\r\n          const result = await listener(params);\r\n\r\n          client?.sendMessage(`ack:${event}`, { result });\r\n        } catch (error) {\r\n          try {\r\n            client?.sendMessage('error', { error });\r\n            handleError(error);\r\n          } catch (e) {\r\n            handleError(e);\r\n          }\r\n        }\r\n      });\r\n\r\n    const subscriptions: EventSubscription[] = [];\r\n\r\n    try {\r\n      subscriptions.push(\r\n        on('getAll', async () => {\r\n          const keys = await AsyncStorage.getAllKeys();\r\n          return await AsyncStorage.multiGet(keys);\r\n        })\r\n      );\r\n    } catch (e) {\r\n      handleError(e);\r\n    }\r\n\r\n    try {\r\n      subscriptions.push(\r\n        on('set', ({ key, value }) => {\r\n          if (key !== undefined && value !== undefined) return AsyncStorage.setItem(key, value);\r\n          else return Promise.resolve();\r\n        })\r\n      );\r\n    } catch (e) {\r\n      handleError(e);\r\n    }\r\n\r\n    try {\r\n      subscriptions.push(\r\n        on('remove', ({ key }) => {\r\n          if (key !== undefined) return AsyncStorage.removeItem(key);\r\n          else return Promise.resolve();\r\n        })\r\n      );\r\n    } catch (e) {\r\n      handleError(e);\r\n    }\r\n\r\n    return () => {\r\n      for (const subscription of subscriptions) {\r\n        try {\r\n          subscription?.remove();\r\n        } catch (e) {\r\n          handleError(e);\r\n        }\r\n      }\r\n    };\r\n  }, [client]);\r\n}\r\n"]}