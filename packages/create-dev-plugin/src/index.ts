#!/usr/bin/env node

import chalk from 'chalk';
import { Command } from 'commander';
import fs from 'fs/promises';
import path from 'path';
import prompts, { type PromptObject } from 'prompts';
import validateNpmPackage from 'validate-npm-package-name';

import { createAppAdapterProjectAsync } from './createAppAdapterProject';
import { createWebUiProjectAsync } from './createWebUiProject';
import { resolvePackageManager } from './resolvePackageManager';
import type { ProjectInfo } from './types';
import { newStep } from './utils';
import spawnAsync from '@expo/spawn-async';

const packageJSON = require('../package.json');

const program = new Command(packageJSON.name)
  .version(packageJSON.version)
  .arguments('[path]')
  .usage(`[options] ${chalk.green('[path]')}`)
  .description('Create an Expo DevTools plugin')
  .parse(process.argv);

async function runAsync(programName: string) {
  const answers = await prompts(createQuestions(), { onCancel: () => process.exit(0) });
  const projectInfo: ProjectInfo = {
    name: answers.name,
    description: answers.description,
    hookName: answers.hookName,
  };
  const targetDir = program.args[0] || process.cwd();
  const projectRoot = path.resolve(path.join(targetDir, projectInfo.name));
  if (await pathExistsAsync(projectRoot)) {
    throw new Error(`The path ${projectRoot} already exists. Aborting.`);
  }
  await fs.mkdir(projectRoot, { recursive: true });

  const packageManager = resolvePackageManager();
  await newStep('Creating the app adapter project', async (step) => {
    await createAppAdapterProjectAsync(projectRoot, projectInfo, packageManager);
    step.succeed('Created the app adapter project');
  });

  await newStep('Creating the webui project', async (step) => {
    await createWebUiProjectAsync(projectRoot, projectInfo, packageManager);
    step.succeed('Created the webui project');
  });

  await newStep('Initializing Git repository', async (step) => {
    await spawnAsync('git', ['init'], { cwd: projectRoot, stdio: 'ignore' });
    await spawnAsync('git', ['add', '-A'], { cwd: projectRoot, stdio: 'ignore' });
    const commitMsg = `Initial commit\n\nGenerated by ${packageJSON.name} ${packageJSON.version}.`;
    await spawnAsync('git', ['commit', '-m', commitMsg], { cwd: projectRoot, stdio: 'ignore' });
    step.succeed('Initialized Git repository');
  });

  console.log(`\n\nâœ… Successfully created DevTools plugin\n`);
  console.log(
    `You can now goto ${projectRoot} and start the dev server for webui by running: \`yarn web:dev\`,`
  );
  console.log(`or edit the app side plugin in the \`src/${projectInfo.hookName}.ts\` file.`);
  console.log();
}

function createQuestions(): PromptObject[] {
  return [
    {
      type: 'text',
      name: 'name',
      message: 'What is the name of the DevTools plugin?',
      validate: (value: string) =>
        validateNpmPackage(value).validForNewPackages || 'Must be a valid npm package name',
    },
    {
      type: 'text',
      name: 'description',
      message: 'What is the description of the DevTools plugin?',
      initial: 'A new DevTools plugin created by create-dev-plugin',
      validate: (input) => !!input || 'The description cannot be empty',
    },
    {
      type: 'text',
      name: 'hookName',
      message: 'What is the React hook name for app integration?',
      initial: 'useMyPlugin',
      validate: (input) =>
        (!!input && typeof input === 'string' && input.startsWith('use')) ||
        'The React hook name cannot be empty and should start with "use"',
    },
  ];
}

async function pathExistsAsync(filePath: string) {
  try {
    await fs.stat(filePath);
    return true;
  } catch (e) {}
  return false;
}

(async () => {
  program.parse(process.argv);
  try {
    await runAsync(packageJSON.name);
  } catch (e) {
    console.error('Uncaught Error', e);
    process.exit(1);
  }
})();
